# Fonction pour calculer les coûts de sinistre pour chaque mois par assuré
calcul_couts_sinistre <- function(mortality_data, nb_assures, capital_initial) {
# Estimer le nombre d'assurés décédés chaque mois en fonction des données de mortalité
mortalite_mensuelle <- mortality_data$Mortality_Rate / 12
nb_deces_mois <- round(nb_assures * mortalite_mensuelle)
# Calculer les coûts de sinistre pour chaque mois par assuré
couts_sinistre <- nb_deces_mois * capital_initial
return(couts_sinistre)
}
couts_sinistre_mois <- calcul_couts_sinistre(mortality_data, nb_assures, capital_initial)
couts_sinistre_mois <- calcul_couts_sinistre(mortality_data, length(df$Policy_ID), capital_initial)
couts_sinistre_mois <- calcul_couts_sinistre(mortality_data, length(df$Policy_ID), capital_initial=df_corrige$Initial_Capital)
mortality_data <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Mortality table.xlsx")
mortality_data <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Mortality table.xlsx")
# Fonction pour calculer les coûts de sinistre pour chaque mois par assuré
calcul_couts_sinistre <- function(mortality_data, nb_assures, capital_initial) {
# Estimer le nombre d'assurés décédés chaque mois en fonction des données de mortalité
mortalite_mensuelle <- mortality_data$Rate / 12
nb_deces_mois <- round(nb_assures * mortalite_mensuelle)
# Calculer les coûts de sinistre pour chaque mois par assuré
couts_sinistre <- nb_deces_mois * capital_initial
return(couts_sinistre)
}
couts_sinistre_mois <- calcul_couts_sinistre(mortality_data, length(df$Policy_ID), capital_initial=df_corrige$Initial_Capital)
mortality_data <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Mortality table.xlsx")
# Fonction pour calculer les coûts de sinistre pour chaque mois par assuré
calcul_couts_sinistre <- function(mortality_data, nb_assures, capital_initial) {
# Estimer le nombre d'assurés décédés chaque mois en fonction des données de mortalité
mortalite_mensuelle <- mortality_data$Rate / 12
nb_deces_mois <- round(nb_assures * mortalite_mensuelle)
# Calculer les coûts de sinistre pour chaque mois par assuré
couts_sinistre <- nb_deces_mois * capital_initial
return(couts_sinistre)
}
couts_sinistre_mois <- calcul_couts_sinistre(mortality_data, length(df_corrige$Policy_ID), capital_initial = df_corrige$Initial_Capital)
# Fonction pour calculer les coûts de sinistre pour chaque mois par assuré
calcul_couts_sinistre <- function(mortality_data, nb_assures, capital_initial=1) {
# Estimer le nombre d'assurés décédés chaque mois en fonction des données de mortalité
mortalite_mensuelle <- mortality_data$Rate / 12
nb_deces_mois <- round(nb_assures * mortalite_mensuelle)
# Calculer les coûts de sinistre pour chaque mois par assuré
couts_sinistre <- nb_deces_mois * capital_initial
return(couts_sinistre)
}
couts_sinistre_mois <- calcul_couts_sinistre(mortality_data, length(df_corrige$Policy_ID))
couts_sinistre_mois
df_corrige$Birth_Date <- as.Date(df_corrige$Birth_Date)
View(df_corrige)
# Calculer l'âge de chaque assuré
todday <- Sys.Date()  # Obtient la date actuelle
# correction date
df_corrige$Birth_Date <- as.Date(df_corrige$Birth_Date)
# correction date
df_corrige$Birth_Date <- as.Date(df_corrige$Birth_Date)
# Calculer l'âge de chaque assuré
todday <- Sys.Date()  # Obtient la date actuelle
df_corrige$Age <- as.numeric(difftime(todday, df_corrige$Birth_Date, units = "years"))
df_corrige$Age <- as.numeric(difftime(todday, df_corrige$Birth_Date, units = "auto"))
View(df_corrige)
df_corrige$Age <- as.numeric(difftime(todday, df_corrige$Birth_Date, units = "days")) / 365.25
View(df_corrige)
df_corrige$Age <- round(as.numeric(difftime(todday, df_corrige$Birth_Date, units = "days")) / 365.25)
View(df_corrige)
df_corrige$Age <- round(as.numeric(difftime(todday, df_corrige$Birth_Date, units = "days")) / 365.25)
mortality$costs <- calcul_couts_sinistre(mortality_data, length(df_corrige$Policy_ID))
mortality_data$costs <- calcul_couts_sinistre(mortality_data, length(df_corrige$Policy_ID))
df_all=df_corrige%>%left_join(mortality_data)
View(df_all)
View(df_all)
df_all$cost_estimd=df_all$costs*df_all$Initial_Capital
calcul_taux_prime_pure <- function(montant_initial, duree_pret, taux_annuel) {
taux_mensuel <- taux_annuel / 12
prime_mensuelle <- montant_initial * (taux_mensuel / (1 - (1 + taux_mensuel)^(-duree_pret)))
taux_prime_pure <- (prime_mensuelle / montant_initial) * 12
return(taux_prime_pure)
}
# Paramètres
montant_initial <- df_all$Initial_Capital
# Fonction pour calculer le taux de prime pure par assuré
calcul_taux_prime_pure <- function(montant_initial, duree_pret, taux_annuel) {
taux_mensuel <- taux_annuel / 12
prime_mensuelle <- montant_initial * (taux_mensuel / (1 - (1 + taux_mensuel)^(-duree_pret)))
taux_prime_pure <- (prime_mensuelle / montant_initial) * 12
return(taux_prime_pure)
}
# Paramètres
montant_initial <- df_all$Initial_Capital
duree_pret <- 120  # Durée du prêt en mois
taux_annuel <- 0.01  # Taux d'actualisation annuel (1%)
# Calculer le taux de prime pure pour chaque assuré
df_all$taux_prime_pure <- calcul_taux_prime_pure(montant_initial, duree_pret, taux_annuel)
# Fonction pour calculer le taux de prime pure par assuré
calcul_taux_prime_pure <- function(montant_initial, duree_pret, taux_annuel) {
taux_mensuel <- taux_annuel / 12
prime_mensuelle <- montant_initial * (taux_mensuel / (1 - (1 + taux_mensuel)^(-duree_pret)))
taux_prime_pure <- (prime_mensuelle / montant_initial) * 12
return(taux_prime_pure)
}
# Paramètres
montant_initial <- df_all$Initial_Capital
duree_pret <- 120  # Durée du prêt en mois
taux_annuel <- 0.01  # Taux d'actualisation annuel (1%)
# Calculer le taux de prime pure pour chaque assuré
df_all$taux_prime_pure <- calcul_taux_prime_pure(montant_initial, duree_pret, taux_annuel)
# Tracer l'histogramme de la variable "Initial_Capital"
hist(df_all$Initial_Capital, main = "Distribution du montant initial du prêt", xlab = "Montant initial du prêt")
df_all$Initial_Capital
summary(df_all$Initial_Capital)
# de mon point de vue le il ya ya un mauvais choix observons le min et le max avant de penser au valeurs extremes
options(scipen = -10)
summary(df_all$Initial_Capital)
# de mon point de vue le il ya ya un mauvais choix observons le min et le max avant de penser au valeurs extremes
options(scipen = 10)
summary(df_all$Initial_Capital)
boxplot(df_all$Initial_Capital,
main = "Diagramme en boîte de Initial_Capital",
xlab = "Initial_Capital",
ylab = "Montant du prêt")
boxplot(df_all$Initial_Capital,
main = "Diagramme en boîte de Initial_Capital sans valeurs extrêmes",
xlab = "Initial_Capital",
ylab = "Montant du prêt",
outline = FALSE)
q1 <- quantile(df_all$Initial_Capital, 0.25)
q3 <- quantile(df_all$Initial_Capital, 0.75)
iqr <- q3 - q1
lower_limit <- q1 - 1.5 * iqr
upper_limit <- q3 + 1.5 * iqr
# Sélectionner uniquement les valeurs qui ne sont pas des valeurs extrêmes
non_outliers <- df_all$Initial_Capital[df_all$Initial_Capital >= lower_limit & df_all$Initial_Capital <= upper_limit]
# Créer un histogramme des valeurs non extrêmes
hist(non_outliers,
main = "Histogramme de Initial_Capital sans valeurs extrêmes",
xlab = "Initial_Capital",
ylab = "Fréquence")
# Identifier les valeurs extrêmes
q1 <- quantile(df_all$Initial_Capital, 0.25)
q3 <- quantile(df_all$Initial_Capital, 0.75)
iqr <- q3 - q1
lower_limit <- q1 - 1.5 * iqr
upper_limit <- q3 + 1.5 * iqr
# Sélectionner uniquement les valeurs qui ne sont pas des valeurs extrêmes
non_outliers <- df_all$Initial_Capital[df_all$Initial_Capital >= lower_limit & df_all$Initial_Capital <= upper_limit]
# Créer un histogramme des valeurs avec et sans valeurs extrêmes
hist(df_all$Initial_Capital,
col = "blue",
main = "Histogramme de Initial_Capital avec et sans valeurs extrêmes",
xlab = "Initial_Capital",
ylab = "Fréquence")
hist(non_outliers,
col = "red",
add = TRUE)
# Légende
legend("topright",
legend = c("Avec valeurs extrêmes", "Sans valeurs extrêmes"),
fill = c("blue", "red"))
#7
par(mfrow=C(2,1))
#7
par(mfrow = c(2, 1))
# Premier histogramme : Initial_Capital avec valeurs extrêmes
hist(df_all$Initial_Capital,
col = "blue",
main = "Histogramme de Initial_Capital avec valeurs extrêmes",
xlab = "Initial_Capital",
ylab = "Fréquence")
# Deuxième histogramme : Initial_Capital sans valeurs extrêmes
hist(non_outliers,
col = "red",
main = "Histogramme de Initial_Capital sans valeurs extrêmes",
xlab = "Initial_Capital",
ylab = "Fréquence")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
df <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Database_Test_R.xlsx",
col_types = c("text", "numeric", "date", "text"))
library(tidyverse)
library(readxl)
df <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Database_Test_R.xlsx",
col_types = c("text", "numeric", "date", "text"))
names(df)
library(tidyverse)
library(readxl)
df <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Database_Test_R.xlsx",
col_types = c("text", "numeric", "date", "text"))
names(df)
head(df)
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
table(sapply(df$Gender,test_na_on_gender))
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
# les variables Gender et Birth_Date ont des incohérences et des valeurs manquantes
table(df$Gender)
df$Birth_Date=as.Date(df$Birth_Date)
table(df$Birth_Date)
# les variables Gender et Birth_Date ont des incohérences et des valeurs manquantes
table(df$Gender)
df$Birth_Date=as.Date(df$Birth_Date) # correction du type
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
df <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Database_Test_R.xlsx",
col_types = c("text", "numeric", "date", "text"))
names(df)
head(df)
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]*100/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
table(sapply(df$Gender,test_na_on_gender))["TRUE"]
table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
100*table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret
```
length(df$Policy_ID)
300/20500
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
library(tidyverse)
library(readxl)
df <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Database_Test_R.xlsx",
col_types = c("text", "numeric", "date", "text"))
names(df)
head(df)
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
stat_na_incorret
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=100*table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
Nombre_NA=colSums(is.na(df))
Ratio_NA=colSums(is.na(df))*100/length(df$Policy_ID)
stat_na=data.frame(names(df),Nombre_NA=Nombre_NA,Ratio_NA=Ratio_NA)
stat_na
test_na_on_gender <- function(value) {
if (is.na(value)) {
return(TRUE)
} else if (value %in% c("M", "F")) {
return(FALSE)
} else {
return(TRUE)
}
}
stat_na_incorret=stat_na
stat_na_incorret$Ratio_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]/length(df$Policy_ID)
stat_na_incorret$Nombre_NA[4]=table(sapply(df$Gender,test_na_on_gender))["TRUE"]
stat_na_incorret
#
table(df$Gender)
df$Birth_Date=as.Date(df$Birth_Date) # correction du type
convert_gender <- function(value) {
if (is.na(value) | is.null(value)) {
return("M")  # Si la valeur est manquante, supposons par défaut que c'est un homme
} else if (toupper(value) %in% c("F", "FEMME", "FEMALE")) {
return("F")  # Si la valeur est "F", "FEMME" ou "FEMALE", convertir en "F"
} else if (toupper(value) %in% c("M", "HOMME", "MALE")) {
return("M")  # Si la valeur est "M", "HOMME" ou "MALE", convertir en "M"
} else {
return(value)  # Sinon, garder la valeur inchangée
}
}
df_corrige=df
df_corrige$Gender=sapply(df$Gender, convert_gender)
# correction date
df_corrige$Birth_Date <- as.Date(df_corrige$Birth_Date)
# Calculer l'âge de chaque assuré
todday <- Sys.Date()  # Obtient la date actuelle
df_corrige$Age <- round(as.numeric(difftime(todday, df_corrige$Birth_Date, units = "days")) / 365.25)
fx_solde_impaye <- function(principal, taux_annuel=0.02, duree_mois=120) {
taux_mensuel <- taux_annuel / 12
mensualite <- principal * (taux_mensuel / (1 - (1 + taux_mensuel)^(-duree_mois)))
solde_impaye <- principal
solde_impaye_mois <- vector()
for (mois in 1:duree_mois) {
interet <- solde_impaye * taux_mensuel
remboursement <- mensualite - interet
solde_impaye <- solde_impaye - remboursement
solde_impaye_mois <- c(solde_impaye_mois, solde_impaye)
}
return(solde_impaye_mois)
}
df_corrige$solde_impaye <- NA
# Boucle pour calculer le solde impayé pour chaque valeur de Initial_Capital
for (i in 1:nrow(df_corrige)) {
solde_impaye_mois <- fx_solde_impaye(df_corrige$Initial_Capital[i])
df_corrige$solde_impaye[i] <- solde_impaye_mois
}
fx_solde_impaye <- function(principal, taux_annuel=0.02, duree_mois=120) {
taux_mensuel <- taux_annuel / 12
mensualite <- principal * (taux_mensuel / (1 - (1 + taux_mensuel)^(-duree_mois)))
solde_impaye <- principal
solde_impaye_mois <- vector()
for (mois in 1:duree_mois) {
interet <- solde_impaye * taux_mensuel
remboursement <- mensualite - interet
solde_impaye <- solde_impaye - remboursement
solde_impaye_mois <- c(solde_impaye_mois, solde_impaye)
}
return(solde_impaye_mois)
}
df_corrige$solde_impaye <- NA
# Boucle pour calculer le solde impayé pour chaque valeur de Initial_Capital
for (i in 1:nrow(df_corrige)) {
solde_impaye_mois <- fx_solde_impaye(df_corrige$Initial_Capital[i])
df_corrige$solde_impaye[i] <- solde_impaye_mois
}
mortality_data <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Mortality table.xlsx")
# Fonction pour calculer les coûts de sinistre pour chaque mois par assuré
calcul_couts_sinistre <- function(mortality_data, nb_assures, capital_initial=1) {
# Estimer le nombre d'assurés décédés chaque mois en fonction des données de mortalité
mortalite_mensuelle <- mortality_data$Rate / 12
nb_deces_mois <- round(nb_assures * mortalite_mensuelle)
# Calculer les coûts de sinistre pour chaque mois par assuré
couts_sinistre <- nb_deces_mois * capital_initial
return(couts_sinistre)
}
mortality_data$costs <- calcul_couts_sinistre(mortality_data, length(df_corrige$Policy_ID))
df_all=df_corrige%>%left_join(mortality_data)
df_all$cost_estimed=df_all$costs*df_all$Initial_Capital
mortality_data <- read_excel("C:/Users/fanym/OneDrive/Bureau/test/Mortality table.xlsx")
# Fonction pour calculer les coûts de sinistre pour chaque mois par assuré
calcul_couts_sinistre <- function(mortality_data, nb_assures, capital_initial=1) {
# Estimer le nombre d'assurés décédés chaque mois en fonction des données de mortalité
mortalite_mensuelle <- mortality_data$Rate / 12
nb_deces_mois <- round(nb_assures * mortalite_mensuelle)
# Calculer les coûts de sinistre pour chaque mois par assuré
couts_sinistre <- nb_deces_mois * capital_initial
return(couts_sinistre)
}
mortality_data$costs <- calcul_couts_sinistre(mortality_data, length(df_corrige$Policy_ID))
df_all=df_corrige%>%left_join(mortality_data)
df_all$cost_estimed=df_all$costs*df_all$Initial_Capital
# Fonction pour calculer le taux de prime pure par assuré
calcul_taux_prime_pure <- function(montant_initial, duree_pret, taux_annuel) {
taux_mensuel <- taux_annuel / 12
prime_mensuelle <- montant_initial * (taux_mensuel / (1 - (1 + taux_mensuel)^(-duree_pret)))
taux_prime_pure <- (prime_mensuelle / montant_initial) * 12
return(taux_prime_pure)
}
# Paramètres
montant_initial <- df_all$Initial_Capital
duree_pret <- 120  # Durée du prêt en mois
taux_annuel <- 0.01  # Taux d'actualisation annuel (1%)
# Calculer le taux de prime pure pour chaque assuré
df_all$taux_prime_pure <- calcul_taux_prime_pure(montant_initial, duree_pret, taux_annuel)
# Tracer l'histogramme de la variable "Initial_Capital"
hist(df_all$Initial_Capital, main = "Distribution du montant initial du prêt", xlab = "Montant initial du prêt")
#
options(scipen = 10)
summary(df_all$Initial_Capital)
#
boxplot(df_all$Initial_Capital,
main = "Diagramme en boîte de Initial_Capital sans valeurs extrêmes",
xlab = "Initial_Capital",
ylab = "Montant du prêt",
outline = FALSE)
par(mfrow = c(2, 1))
# Premier histogramme : Initial_Capital avec valeurs extrêmes
hist(df_all$Initial_Capital,
col = "blue",
main = "Histogramme de Initial_Capital avec valeurs extrêmes",
xlab = "Initial_Capital",
ylab = "Fréquence")
# Deuxième histogramme : Initial_Capital sans valeurs extrêmes
hist(non_outliers,
col = "red",
main = "Histogramme de Initial_Capital sans valeurs extrêmes",
xlab = "Initial_Capital",
ylab = "Fréquence")
